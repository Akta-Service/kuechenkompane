<style>
  @import url('https://fonts.googleapis.com/css2?family=DM+Sans:ital,opsz,wght@0,9..40,100..1000;1,9..40,100..1000&display=swap');

  .snow-topbar {
    /* background-color: #074a97; */
    overflow: hidden;
  }
  .snow-topbar-container {
    max-width: 1320px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .snow-topbar-content {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 300px;
    padding: 10px 0;
  }

  .snow-topbar-title {
    /* color: #ffffff; */
    font-family: 'DM Sans';
    font-weight: 700;
    font-size: 24px;
    text-align: center;
    padding: 10px 0;
  }

  .countdown-container {
    display: flex;
    justify-content: center;
    /* align-items: center; */
    gap: 12px;
  }

  .timer-item {
    text-align: center;
    position: relative;
  }

  .timer-item span {
    font-family: 'DM Sans';
    font-size: 24px;
    line-height: 24px;
    /* color: #ffffff; */
    display: block;
  }

  .timer-item .timer-text {
    font-size: 14px;
    line-height: 14px;
  }
  .timer-item .divider {
    font-size: 34px;
    line-height: 1;
    /* margin-top: -6px; */
  }

  @media (max-width: 767px) {
    .snow-topbar-content {
      gap: 20px;
    }

    .snow-topbar-title {
      font-size: 18px;
    }
    .timer-item span {
      font-size: 18px;
    }
    .timer-item .divider {
      font-size: 24px;
    }
  }
  @media (max-width: 575px) {
    .countdown-container {
      gap: 5px;
    }

    .snow-topbar-title {
      font-size: 14px;
    }
    .timer-item span {
      font-size: 14px;
      line-height: 1.3;
    }
    .timer-item .divider {
      font-size: 16px;
    }
    .snow-topbar-content {
      gap: 20px;
    }
    .snow-topbar-container {
      padding: 0 10px;
    }

    .timer-item .timer-text {
      font-size: 10px;
      line-height: 10px;
    }
  }
</style>



{% assign show_countdown = false %}

{% for coll in section.settings.target_collections %}
  {% if collection.handle == coll.handle %}
    {% assign show_countdown = true %}
  {% endif %}
{% endfor %}



{% if show_countdown %}
  <div class="snow-topbar m-color-{{ section.settings.color_scheme }}">
    <div class="snow-topbar-container">
      <div class="snow-topbar-content">
        <div class="snow-topbar-title">{{ section.settings.top_title }}</div>
        <div class="snow-topbar-timer">
          <div id="countdown-{{ section.id }}" class="countdown-container">
            <div class="timer-item">
              <span id="day-{{ section.id }}">00</span>
              <span class="timer-text">Tage</span>
            </div>
            <div class="timer-item">
              <span class="divider">:</span>
            </div>
            <div class="timer-item">
              <span id="hrs-{{ section.id }}">00</span>
              <span class="timer-text">Std</span>
            </div>
            <div class="timer-item">
              <span class="divider">:</span>
            </div>
            <div class="timer-item">
              <span id="min-{{ section.id }}">00</span>
              <span class="timer-text">Min</span>
            </div>
            <div class="timer-item">
              <span class="divider">:</span>
            </div>
            <div class="timer-item">
              <span id="sec-{{ section.id }}">00</span>
              <span class="timer-text">Sek</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
{% endif %}

<script>
  document.addEventListener('DOMContentLoaded', function() {
    (function() {
      const sectionId = '{{ section.id }}';
      const dayEl = document.getElementById('day-' + sectionId);
      const hrsEl = document.getElementById('hrs-' + sectionId);
      const minEl = document.getElementById('min-' + sectionId);
      const secEl = document.getElementById('sec-' + sectionId);

      const startHour = {{ section.settings.start_hour | default: 48 }};
      const endHour = {{ section.settings.end_hour | default: 24 }};

      // Get start datetime string from settings; fallback to fixed date
      const startDateTimeStr = '{{ section.settings.start_datetime | default: "2025-08-06T12:00:00Z" }}';
      const epochStart = new Date(startDateTimeStr).getTime();

      const cycleLengthMs = (startHour - endHour) * 60 * 60 * 1000;
      const startCountdownMs = startHour * 60 * 60 * 1000;
      const endCountdownMs = endHour * 60 * 60 * 1000;

      function updateTimer() {
        const now = new Date().getTime();
        let elapsed = (now - epochStart) % cycleLengthMs;
        let remaining = startCountdownMs - elapsed;

        if (remaining < endCountdownMs) {
          remaining = startCountdownMs;
        }

        const days = Math.floor(remaining / (24 * 60 * 60 * 1000));
        const hours = Math.floor((remaining % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000));
        const minutes = Math.floor((remaining % (60 * 60 * 1000)) / (60 * 1000));
        const seconds = Math.floor((remaining % (60 * 1000)) / 1000);

        dayEl.textContent = days.toString().padStart(2, '0');
        hrsEl.textContent = hours.toString().padStart(2, '0');
        minEl.textContent = minutes.toString().padStart(2, '0');
        secEl.textContent = seconds.toString().padStart(2, '0');
      }

      updateTimer();
      setInterval(updateTimer, 1000);
    })();
  });
</script>





{% schema %}
{
  "name": "Countdown Timer",
  "tag": "section",
  "class": "countdown-timer-section",
  "settings": [
    {
      "type": "collection_list",
      "id": "target_collections",
      "label": "Show on these collections"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "Color scheme"
    },
    {
      "type": "text",
      "id": "top_title",
      "label": "Title Here",
      "default": "Black Friday in July Ends:"
    },
    {
      "type": "number",
      "id": "start_hour",
      "label": "Start Hour",
      "default": 48
    },
    {
      "type": "number",
      "id": "end_hour",
      "label": "End Hour",
      "default": 24
    },
    {
      "type": "text",
      "id": "start_datetime",
      "label": "Countdown Start Date and Time (ISO format)",
      "default": "2025-08-06T12:00:00Z",
      "info": "Enter the start date/time in ISO 8601 format, e.g. 2025-08-06T12:00:00Z (UTC time)."
    }


  ],

  "presets": [
    {
      "name": "Countdown Timer"
    }
  ]
}
{% endschema %}
