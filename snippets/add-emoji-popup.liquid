{% comment %} {{ 'modal-with-input-emoji.css' | asset_url | stylesheet_tag }} {% endcomment %}
{% comment %} <script src="{{ 'modal-with-input-emoji.js' | asset_url }}" defer="defer"></script> {% endcomment %}
<style>
      :root {
        --bg: rgba(0, 0, 0, 0.56);
        --white: #fff;
        --primary: #1f7a8c;
        --duration: 280ms;
      }
      .custom-popup-custom-text {
        /* Modal Backdrop */
        .backdrop {
          position: fixed;
          inset: 0;
          display: none;
          align-items: center;
          justify-content: center;
          z-index: 1000;
          background: transparent;
        }

        .backdrop.show {
          display: flex;
          animation: backdropFadeIn var(--duration) ease forwards;
        }

        .backdrop.hide {
          animation: backdropFadeOut var(--duration) ease forwards;
        }


        /* Modal Panel */
        .modal {
          width: min(700px, 92%);
          max-height: 90vh;
          background: var(--white);
          border-radius: 12px;
          box-shadow: 0 20px 60px rgba(11, 18, 32, 0.32);
          overflow: hidden;
          transform-origin: center top;
          opacity: 0;
          pointer-events: none;
        }
        @media (max-width: 767px) {
          .modal {
            overflow-y: scroll;
          }
        }
        .modal:focus-visible {
          outline: none !important;
        }
        .modal.enter {
          animation: modalIn 360ms cubic-bezier(0.2, 0.9, 0.25, 1) forwards;
          pointer-events: auto;
        }

        .modal.leave {
          animation: modalOut 220ms ease forwards;
          pointer-events: none;
        }


        .modal-header,
        .modal-footer {
          padding: 16px 20px;
          background: #fff;
        }

        .modal-header h2 {
          font-size: 30px;
          padding-top: 20px;
        }

        .modal-header {
          display: flex;
          font-weight: 700;
          color: #1f2937;
          position: relative;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          text-align: center;
          gap: 16px;
        }
        #backdrop .modal-header .close-btn {
          display: flex;
          align-items: center;
          justify-content: center;
          font-weight: 700;
          color: #1f2937;
          position: absolute;
          right: 15px;
          top: 15px;
        }

        .modal-body {
          padding: 20px;
          min-height: 120px;
          background: #fff;
        }
        button#saveEmojiBtn {
          display: block;
          text-align: center;
          background: #fa8526;
          padding: 14px 20px;
          width: 100%;
          border-radius: 6px;
          color: #fff;
        }
        .close-btn {
          background: none;
          border: none;
          font-size: 20px;
          cursor: pointer;
          width: 36px;
          height: 36px;
          display: inline-flex;
          align-items: center;
          justify-content: center;
          border-radius: 8px;
          transition: transform 160ms ease
          , background 120ms ease;
          color: #6b7280;
        }
        .footer-close-btn {
          text-align: center;
          padding: 16px 0;
          display: block;
          width: 100%;
        }
        .close-btn:hover {
          background: rgba(11, 18, 32, 0.04);
        }

        /* Emoji Input Styles */
        #emojiInput {
          width: 100%;
          padding: 12px;
          border: 2px solid #e5e7eb;
          border-radius: 8px;
          font-size: 16px;
          font-family: inherit;
          outline: none;
          transition: border-color 0.2s ease;
          margin-bottom: 16px;
        }

        #emojiInput:focus {
          border-color: var(--primary);
        }

        #emojiDisplay {
          font-size: 2rem;
          min-height: 3rem;
          user-select: none;
          padding: 12px;
          border-radius: 8px;
          line-height: 1.4;
          display: none;
          transition: opacity 1s ease
          , transform 1s ease;
          position: absolute;
          margin-left: 130px;
          margin-bottom: 30px;
          min-width: 200px;
          text-align: left;
        }
        @media (max-width: 767px) {
          {% comment %} #emojiDisplay {
            margin-left: 48px;
            margin-bottom: 30px;
          } {% endcomment %}
        }
        #emojiDisplay.show {
          display: block;
          animation: displayFadeIn 1s ease forwards;
        }

        #emojiDisplay.hide {
          animation: displayFadeOut 1s ease forwards;
        }

        #emojiDisplay span {
          display: inline-block;
          font-weight: 400;
          color: rgb(255 255 255);
          /* font-family: panettone; */
          font-family: Optima;
          font-size: 14px;
        }
        @media (max-width: 767px) {
          #emojiDisplay span {
            display: inline-block;
            font-weight: 400;
            color: rgb(255 255 255);
            font-size: 9px;
          }
        }
        #emojiDisplay span:empty::before {
          content: "\00A0";
          /* non-breaking space */
          display: inline-block;
        }
        .highlight {
          animation: highlightAnim 1s ease forwards;
        }
        /* Heading fade animation */
        .heading-fade-out {
          animation: fadeOut 1s ease forwards;
        }

        .heading-fade-in {
          animation: fadeIn 1s ease forwards;
        }

        .emoji-list {
          list-style: none;
          padding: 0;
          margin: 0;
          display: grid;
          grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
          gap: 8px;
        }

        .emoji-list li {
          font-size: 1.5rem;
          padding: 8px;
          text-align: center;
          cursor: pointer;
          border-radius: 6px;
          transition: all 0.2s ease;
          user-select: none;
          font-size: 16px;
        }

        .emoji-list li:hover {
          background: #f3f4f6;
          transform: scale(1.1);
        }

        .emoji-list li:active {
          transform: scale(0.95);
        }

        /* Responsive */
        @media (max-width: 420px) {
          .modal {
            border-radius: 10px;
            width: calc(100% - 24px);
          }
          .modal-body {
            min-height: 90px;
            padding: 16px;
          }
          #emojiDisplay {
            font-size: 1.5rem;
            min-height: 2.5rem;
            margin-bottom: 10px;
          }
        }

        .product-image-wrap {
          max-height: 300px;
          overflow: hidden;
          display: flex;
          align-items: center;
          justify-content: center;
          margin-bottom: 16px;
        }
        .product-image-wrap img {
          object-fit: cover;
        }
      }
      .modal-button-and-text-show.show-text.active {
        display: none;
      }
      .modal-button-and-text-show {
        display: grid;
        grid-template-columns: 1fr 130px;
        gap: 20px;
        padding: 20px;
        border: 1px solid currentColor;
        border-radius: 10px;
        margin-top: 20px;
        cursor: pointer;
      }
      .modal-button-and-text-show p {
        margin-top: 10;
        font-size: 14px;
      }
      .add-logo-no-selection.show-text2 {
        display: none;
      }
      p.add-logo-no-selection-text {
        font-size: 16px;
        {% comment %} color: green; {% endcomment %}
      }

      .add-logo-no-selection.show-text2.active {
        display: flex;
        justify-content: space-between;
        padding: 10px 0;
        gap: 20px;
        padding: 20px;
        border: 1px solid currentColor;
        border-radius: 10px;
        margin-top: 20px;
        cursor: pointer;
      }

    .btn--wrapper {
      display: flex;
      flex-direction: column;
      align-items: start;
    }


      .add-logo-no-selection.show-text2.active button {
        {% comment %} color: #fa8526; {% endcomment %}
      }
      .add-logo-no-selection.show-text2.active button span {
        transform: rotate(45deg);
      }

      .add-logo-no-selection-content {
        display: block;
        justify-content: space-between;
        cursor: pointer;
        width: 100%;
    }

    button#remove_btn {
      color: red;
  }

      @keyframes fadeOut {
        0% {
          opacity: 1;
          transform: translateY(0);
        }
        100% {
          opacity: 0;
          transform: translateY(-20px);
        }
      }

      @keyframes fadeIn {
        0% {
          opacity: 0;
          transform: translateY(-20px);
        }
        100% {
          opacity: 1;
          transform: translateY(0);
        }
      }
      @keyframes highlightAnim {
        0% {
          background-color: #fef3c7;
          transform: scale(1.2);
        }
        100% {
          background-color: transparent;
          transform: scale(1);
        }
      }
      @keyframes displayFadeIn {
        0% {
          opacity: 0;
          transform: scale(0.8);
          transform-origin: left center;
        }
        100% {
          opacity: 1;
          transform: scale(1);
          transform-origin: left center;
        }
      }

      @keyframes displayFadeOut {
        0% {
          opacity: 1;
          transform: scale(1);
          transform-origin: left center;
        }
        100% {
          opacity: 0;
          transform: scale(0.8);
          transform-origin: left center;
        }
      }
      @keyframes backdropFadeIn {
        from {
          background: rgba(0, 0, 0, 0);
        }
        to {
          background: var(--bg);
        }
      }

      @keyframes backdropFadeOut {
        from {
          background: var(--bg);
        }
        to {
          background: rgba(0, 0, 0, 0);
        }
      }
      @keyframes modalIn {
        0% {
          transform: translateY(-18px) scale(0.96);
          opacity: 0;
        }
        60% {
          transform: translateY(6px) scale(1.02);
          opacity: 1;
        }
        100% {
          transform: translateY(0) scale(1);
          opacity: 1;
        }
      }

      @keyframes modalOut {
        0% {
          transform: translateY(0) scale(1);
          opacity: 1;
        }
        100% {
          transform: translateY(-8px) scale(0.98);
          opacity: 0;
        }
      }
</style>

<div class="custom-popup-custom-text">
  <div
    id="backdrop"
    class="backdrop"
    aria-hidden="true"
  >
    <div
      id="modal"
      class="modal"
      role="dialog"
      aria-modal="true"
      aria-labelledby="mTitle"
      tabindex="-1"
    >
      <div class="modal-header">
        <h2>{{ section.settings.per_title }}</h2>
        <p>{{ section.settings.per_sub_title }}</p>
        <button
          id="closeModal"
          class="close-btn"
          aria-label="Close modal"
        >
          &times;
        </button>
      </div>
      <div class="modal-body">
        <div class="product-image-wrap">
          <div id="emojiDisplay"></div>
          {% comment %} <img src="{{ product.featured_image | image_url: width: "800" }}" alt=""> {% endcomment %}
          {% if product.selected_or_first_available_variant.metafields.custom.personalization_image != blank %}
            <img
              id="variantImageInModal_variant_meta"
              src="
                                                                                                                {{ product.selected_or_first_available_variant.metafields.custom.personalization_image | image_url: width: 800 }}
              "
              alt="{{ product.title }}"
            >

          {% elsif product.metafields.custom.personalizer_image != blank %}
            <img
              id="variantImageInModal_meta"
              src="{{ product.metafields.custom.personalizer_image | image_url: width: 800 }}"
              alt="{{ product.title }}"
            >
          {% else %}
            <img
              id="variantImageInModal"
              src="{{ product.featured_image | image_url: width: 800 }}"
              alt=""
            >
          {% endif %}
        </div>

        <input
          type="text"
          id="emojiInput"
          placeholder="Text oder Zahlen eingeben…"
        >
        {% comment %}
          <ul class="emoji-list">
            <li>Chefkoch Max</li>
            <li>Küchenmeister</li>
            <li>Für Papa</li>
            <li>BBQ King</li>
            <li>Beste Köchin</li>
          </ul>
        {% endcomment %}
      </div>
      <div class="modal-footer">
        <button id="saveEmojiBtn">{{ section.settings.save_btn }}</button>
        <button
          data-hide-modal
          id="closeModal"
          class="footer-close-btn"
          aria-label="Close modal"
        >
          {{ section.settings.cancel_btn }}
        </button>
      </div>
    </div>
  </div>
</div>
<script>
  const modalModule = (() => {
    const openBtn = document.getElementById('openModal');
    const closeBtn = document.getElementById('closeModal');
    const backdrop = document.getElementById('backdrop');
    const modal = document.getElementById('modal');
    const input = document.getElementById('emojiInput');
    const display = document.getElementById('emojiDisplay');
    const emojiList = document.querySelectorAll('.emoji-list li');
    const saveBtn = document.getElementById('saveEmojiBtn');
    const showTextEmoji = document.getElementById('showTextEmoji');
    const openButtons = document.querySelectorAll('[data-open-modal]');
    const hideButtons = document.querySelectorAll('[data-hide-modal]');

    const remove_btn = document.getElementById('remove_btn');

    openButtons.forEach((btn) => {
      btn.addEventListener('click', show);
    });
    hideButtons.forEach((btn) => {
      btn.addEventListener('click', hide);
    });
    let isOpen = false;
    let oldValue = '';
    let updateTimer = null;

    function show() {
      if (isOpen) return;
      isOpen = true;
      backdrop.style.display = 'flex';
      backdrop.classList.remove('hide');
      backdrop.classList.add('show');
      modal.classList.remove('leave');
      void modal.offsetWidth;
      modal.classList.add('enter');
      backdrop.setAttribute('aria-hidden', 'false');
      document.body.style.overflow = 'hidden';
      modal.focus();
    }

    function hide() {
      if (!isOpen) return;
      isOpen = false;
      backdrop.classList.remove('show');
      backdrop.classList.add('hide');
      modal.classList.remove('enter');
      modal.classList.add('leave');
      backdrop.setAttribute('aria-hidden', 'true');
      setTimeout(() => {
        backdrop.classList.remove('hide');
        backdrop.style.display = 'none';
        document.body.style.overflow = '';
      }, 220);
    }

    function saveToMemory(value) {
      localStorage.setItem('emojiInputValue', value);
    }

    function getFromMemory() {
      return localStorage.getItem('emojiInputValue') || '';
    }

    function showDisplay() {
      display.style.display = 'block';
      display.classList.remove('hide');
      display.classList.add('show');
    }

    function hideDisplay() {
      display.classList.remove('show');
      display.classList.add('hide');
      setTimeout(() => {
        display.style.display = 'none';
      }, 1000);
    }

    function renderWithAnimation(newText, oldText) {
      display.innerHTML = '';
      const newChars = Array.from(newText);
      const oldChars = Array.from(oldText);

      newChars.forEach((ch, i) => {
        const span = document.createElement('span');
        span.textContent = ch === ' ' ? '\u00A0' : ch;
        if (oldChars[i] !== ch) span.classList.add('highlight');
        display.appendChild(span);
      });

      if (newText.trim() !== '') showDisplay();
      else hideDisplay();
    }

    function updateDisplayWithDelay(newValue) {
      if (updateTimer) clearTimeout(updateTimer);
      updateTimer = setTimeout(() => {
        renderWithAnimation(newValue, oldValue);
        oldValue = newValue;
      }, 300);
    }

    // Open / Close event
    openBtn.addEventListener('click', show);
    closeBtn.addEventListener('click', hide);
    backdrop.addEventListener('click', (e) => {
      if (e.target === backdrop) hide();
    });
    document.addEventListener('keydown', (e) => {
      if ((e.key === 'Escape' || e.key === 'Esc') && isOpen) hide();
    });

    // Input typing
    input.addEventListener('input', () => {
      let val = input.value.slice(0, 20);
      input.value = val;
      updateDisplayWithDelay(val);
    });

    // Emoji list click
    emojiList.forEach((item) => {
      item.addEventListener('click', () => {
        const val = item.textContent;
        input.value = val;
        input.focus();
        updateDisplayWithDelay(val);
      });
    });

    // Save button
    saveBtn.addEventListener('click', () => {
      saveToMemory(input.value);
      if (showTextEmoji) {
        showTextEmoji.textContent = input.value;
      }
      hide();
    });

    // delete button
    remove_btn.addEventListener('click', () => {
      if (showTextEmoji) {
        showTextEmoji.textContent = '';
      }

      input.value = '';
      oldValue = '';

      localStorage.removeItem('emojiInputValue');

      renderWithAnimation('', '');
    });

    // Initialize saved value
    const saved = getFromMemory();
    if (saved) {
      input.value = saved;
      oldValue = saved;
      renderWithAnimation(saved, '');
      if (showTextEmoji) showTextEmoji.textContent = saved;
    }

    backdrop.style.display = 'none';
  })();
  function updateActiveClass() {
    const savedValue = localStorage.getItem('emojiInputValue');
    const showTextDiv = document.querySelector('.show-text');
    const showTextDiv2 = document.querySelector('.show-text2');

    if (!showTextDiv || !showTextDiv2) return;

    if (savedValue) {
      showTextDiv.classList.add('active');
      showTextDiv2.classList.add('active');
    } else {
      showTextDiv.classList.remove('active');
      showTextDiv2.classList.remove('active');
    }
  }
  updateActiveClass();
  const observerNew = new MutationObserver(() => {
    updateActiveClass();
  });
  observerNew.observe(document.body, {
    childList: true,
    subtree: true,
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const urlParams = new URLSearchParams(window.location.search);
    const fromCollection = urlParams.get('from');
    const forms = document.querySelectorAll('form[action^="/cart/add"]');
    {% comment %} const modalVariantImage = document.getElementById('variantImageInModal'); {% endcomment %}

    {% comment %} document.addEventListener('variant:changed', function (e) {
      if (!modalVariantImage) return;

      const variant = e.detail.variant;
      if (variant && variant.featured_image && variant.featured_image.src) {
        modalVariantImage.src = variant.featured_image.src.replace(/(\.[^.]*)$/, '_800x$1');
      }
    }); {% endcomment %}


    const modalVariantImage = document.getElementById('variantImageInModal_variant_meta');

    document.addEventListener('variant:changed', function (e) {
      if (!modalVariantImage) return;

      const variant = e.detail.variant;

      let variant_mata_image = variant.metafields.custom.personalization_image

      console.log("variant meta image", variant_mata_image)


      if (variant && variant.featured_image && variant.featured_image.src) {
        modalVariantImage.src = variant.featured_image.src.replace(/(\.[^.]*)$/, '_800x$1');
      }
    });


    function updateForms() {
      const emojiInputValue = localStorage.getItem('emojiInputValue') || '';
      forms.forEach(function (form) {
        // From_Collection input
        if (fromCollection) {
          let inputFrom = form.querySelector('input[name="properties[From_Collection]"]');
          if (!inputFrom) {
            inputFrom = document.createElement('input');
            inputFrom.type = 'hidden';
            inputFrom.name = 'properties[From_Collection]';
            form.appendChild(inputFrom);
          }
          inputFrom.value = fromCollection;
        }
        // Emoji input
        let inputEmoji = form.querySelector('input[name="properties[Emoji_Text]"]');
        if (!inputEmoji) {
          inputEmoji = document.createElement('input');
          inputEmoji.type = 'hidden';
          inputEmoji.name = 'properties[Emoji_Text]';
          form.appendChild(inputEmoji);
        }
        inputEmoji.value = emojiInputValue;
      });
    }
    updateForms();
    window.addEventListener('storage', function (e) {
      if (e.key === 'emojiInputValue') {
        updateForms();
      }
    });
    const originalSetItem = localStorage.setItem;
    localStorage.setItem = function (key, value) {
      originalSetItem.apply(this, arguments);
      if (key === 'emojiInputValue') {
        updateForms();
      }
    };
  });
</script>
