<style>
  .count-icon {
    display: inline-block;
    position: relative;
    height: 9px;
    width: 9px;
    top: -1px;
    margin-right: 8px;
  }

  .count-icon::after {
    width: 9px;
    height: 9px;
    background: {{ section.settings.bubble_after_color  }};
    border-radius: 9px;
    position: absolute;
    left: 0;
    top: 0;
    content: '';
   
  }
  .count-icon::before {
    animation: bubble 2s linear infinite;
    width: 9px;
    height: 9px;
    background: {{ section.settings.bubble_before_color  }};
    border-radius: 9px;
    position: absolute;
    left: 0;
    top: 0;
    content: '';
    /* margin-top: 8px; */
  }

  .count-people {
    margin-right: 4px;    
    font-weight: 700;   
  }
  #viewers-count {
    
  }
  #stock-count {
    font-weight: 700;
    margin: 0 3px;    
  }
  .viewer-count {
    padding-left: 7px;
    line-height: 1.2;
  } 
  @keyframes bubble {
    0% {
      opacity: 0.5;
    }
    100% {
      transform: scale(2.5);
      opacity: 0;
    }
  }

  .viewer-count {
    margin-top: {{ block.settings.viewer_margin_top }}px;
    margin-bottom: {{ block.settings.viewer_margin_bottom }}px;

  }
  .product-count {
    padding-left: 7px;   
    margin-top: {{ block.settings.product_margin_top }}px;
    margin-bottom: {{ block.settings.product_margin_bottom }}px;
  }
  .product-page .info-badge.sale-badge {
    --border-color: {{ section.settings.border_color }};
  }
  @media only screen and (max-width: 480px) {
    .viewer-count {
      margin-top: {{ block.settings.viewer_margin_top_mobile }}px;
      margin-bottom: {{ block.settings.viewer_margin_bottom_mobile }}px;

    }
    .product-count {
      margin-top: {{ block.settings.p_margin_size_mobile_top }}px;
      margin-bottom: {{ block.settings.p_margin_size_mobile_bottom }}px;
    }
    .product-price {
      margin-bottom: 0 !important;
    }
    .product-page .info-badge.sale-badge {
      border-color: var(--border-color) !important;
    }

  }
</style>

<div class="viewer-count">
  <p class="viewer-count-mobile" style="font-size:{{block.settings.viewer_count_font_size}}px; color: {{block.settings.viewer_text_color}};">
    <span class="count-icon"></span>
    <span class="count-people">
      <span id="viewers-count" style="color: {{block.settings.viewer_count_text_color}};">9
      </span>
      {{ block.settings.view_main_text_1 }}
    </span>

    {{ block.settings.view_main_text_2 }}
  </p>
</div>
{% comment %} {% if product.tags contains "STOCK" %} {% endcomment %}
 {% if block.settings.stock_count_show %}
  <div class="product-count">


{% if product.available %}
  <p class="product-count-mobile" style="font-size:{{block.settings.product_count_font_size}}px; color: {{block.settings.product_text_color}};">
      <span class="count-icon"></span> 
      {{ block.settings.product_main_text_1 }}
      <span id="stock-count" style="color: {{block.settings.product_count_text_color}};">
        13
      </span>
      {{ block.settings.product_main_text_2 }}
    </p>

{%- else -%}
  <p class="product-count-mobile" style="font-size:{{block.settings.product_count_font_size}}px; color: {{block.settings.product_text_color}};">
    <span class="count-icon"></span> 
    {{ block.settings.product_stock_out }}
  </p>
{% endif %}


  </div>
{% endif %}
{% comment %} {% endif %} {% endcomment %}
<script>
  document.addEventListener('DOMContentLoaded', function () {
    function updateViewersCount() {
      // Randomly generate a number of viewers between 5 and 20
      var viewersCount = Math.floor(Math.random() * (20 - 5 + 1)) + 5;
      document.getElementById('viewers-count').innerText = viewersCount + ' ';
    }

    // Update the count every second (1000 milliseconds)
    setInterval(updateViewersCount, {{ block.settings.viewer_count_time }});
  });
</script>


<script>
  document.addEventListener('DOMContentLoaded', function () {
    const stockKey = 'product_stock_count';
    const timestampKey = 'product_stock_start_time';
    const lifespanDays = 3;
    const decreaseInterval = {{ block.settings.stock_count_time | default: 20000 }}; // in ms
    const minStock = 3;
    const maxStock = 20;
    const stockElement = document.getElementById('stock-count');

    function getDaysBetween(date1, date2) {
      return (date2 - date1) / (1000 * 60 * 60 * 24);
    }

    function initStockCountdown() {
      let stockData = localStorage.getItem(stockKey);
      let startTime = localStorage.getItem(timestampKey);
      const now = Date.now();

      if (stockData && startTime) {
        const daysPassed = getDaysBetween(parseInt(startTime), now);

        if (daysPassed > lifespanDays) {
          // Expired, reset values
          localStorage.removeItem(stockKey);
          localStorage.removeItem(timestampKey);
          return initStockCountdown();
        }

        let elapsed = now - parseInt(startTime);
        let decreases = Math.floor(elapsed / decreaseInterval);
        let currentStock = Math.max(maxStock - decreases, minStock);
        stockElement.innerText = ' ' + currentStock + ' ';
        runCountdown(currentStock, parseInt(startTime));
      } else {
        // First-time visit or expired data
        const initialStock = Math.floor(Math.random() * (maxStock - 10)) + 10; // Between 10â€“20
        const now = Date.now();
        localStorage.setItem(stockKey, initialStock);
        localStorage.setItem(timestampKey, now);
        stockElement.innerText = ' ' + initialStock + ' ';
        runCountdown(initialStock, now);
      }
    }

    function runCountdown(initialStock, startTime) {
      let currentStock = initialStock;

      setInterval(() => {
        const now = Date.now();
        let decreases = Math.floor((now - startTime) / decreaseInterval);
        let newStock = Math.max(maxStock - decreases, minStock);
        if (newStock !== currentStock) {
          currentStock = newStock;
          stockElement.innerText = ' ' + currentStock + ' ';
        }
      }, 1000); 
    }

    initStockCountdown();
  });
</script>
