<style>
  .product-radio-options {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .product-radio-option {
    display: flex;
    {% comment %} justify-content: space-between; {% endcomment %}
    align-items: center;
    padding: 14px 18px;
    border: 2px solid #ddd;
    border-radius: 12px;
    cursor: pointer;
    transition: border-color 0.2s, background-color 0.2s;
    font-family: inherit;
    font-size: 16px;
    position: relative;
    gap: 10px;
  }



  .product-radio-option .title {
    font-weight: 600;
  }

  .product-radio-option .price {
    font-weight: bold;
    font-size: 16px;
    margin-left: auto;
  }

  .product-radio-option .price .compare {
    text-decoration: line-through;
    margin-left: 8px;
    color: #999;
    font-weight: normal;
  }

  /* Badges */
  .product-radio-option .badge {
    position: absolute;
    top: -10px;
    right: 12px;
    background: #2d7a2d; /* green */
    color: white;
    font-size: 12px;
    font-weight: 700;
    padding: 2px 8px;
    border-radius: 6px;
    text-transform: uppercase;
  }

  .product-radio-option .badge-red {
    background: #a92424; /* red */
  }

  /* Selected state */
  .product-radio-option input[type="radio"]:checked + .title,
  .product-radio-option input[type="radio"]:checked ~ .title {
  /* fallback if using + or ~ structure */
  }

  .product-radio-option input[type="radio"]:checked + span,
  .product-radio-option input[type="radio"]:checked ~ * {
    color: #000;

  }

  .product-radio-option:has(input[type="radio"]:checked) {
    border-color: #f68b1e; /* orange border on select */
    background-color: #fff9f3;
  }
  select.custom-product-dropdown {
    width: 100%;
    padding: 14px 18px;
    margin-top: 10px;
  }
  label.product-radio-option.option-dropdown {
    {% comment %} padding: 0; {% endcomment %}
  }
  label.product-radio-option.option-dropdown.active select.custom-product-dropdown{
    border-color: #f68b1e;
    background-color: #fff9f3;
  }
  button.btn.add-btn-custom {
    background: #fa8526;
    color: #fff;
    box-shadow: none;
    border: none;
    outline: none;
    margin-top: 15px;
    margin-bottom: 25px;
    padding: 15px;
    border-radius: 5px;
  }

  label.product-radio-option.option-dropdown.active {
    border-color: #f68b1e;
    background-color: #fff9f3;
    overflow: hidden;
  }
  img.variant-image {
    width: 60px;
    height: auto;
  }
  label.product-radio-option.option-dropdown {
    display: block;
    padding: 30px 18px;
  }
  label.product-radio-option.option-dropdown span.title {
    margin-left: 5px;
  }
  .custom-products-list {
    display: none;
  }
  .option-dropdown-header {
    display: flex;
    align-items: center;
    gap: 5px;
  }
  .selected-variant-price {
    margin-left: auto;
  }
</style>
<div class="product-radio-options" {{ block.shopify_attributes }}>
  {%- for variant in product.variants -%}
    <label class="product-radio-option">
      {% if variant.metafields.custom.variant_badge != blank %}
        <span class="badge">{{ variant.metafields.custom.variant_badge }}</span>
      {% endif %}

      <input
        type="radio"
        name="variant_or_custom"
        value="{{ variant.id }}"
        {% if forloop.first %}
          checked
        {% endif %}
        data-available="{{ variant.available }}"
        data-price="{{ variant.price | money }}"
        data-compare="{{ variant.compare_at_price | money }}"
        data-variant-id="{{ variant.id }}"
      >
      <span class="title">{{ variant.title }}</span>

      {% if variant.metafields.custom.variant_image != blank %}
        <img
          class="variant-image"
          src="{{ variant.metafields.custom.variant_image | img_url: 'master' }}"
          alt="variant-image"
        >
      {% endif %}

      <span class="price">
        {{ variant.price | money }}
        {% if variant.compare_at_price > variant.price %}
          <span class="compare">{{ variant.compare_at_price | money }}</span>
        {% endif %}
      </span>
    </label>
  {%- endfor -%}

  {%- if block.settings.custom_product_list != blank -%}
    <label class="product-radio-option option-dropdown">
      <div class="option-dropdown-header">
        <input
          type="radio"
          name="variant_or_custom"
          value="{{ block.settings.custom_product_list.first.selected_or_first_available_variant.id }}"
          data-available="{{ block.settings.custom_product_list.first.selected_or_first_available_variant.available }}"
        >
        <span class="title">1pcs</span>
        <div class="selected-variant-price">
          <span class="price-value price"></span>
          <span class="dp-p-compare-price compare"></span>
        </div>
      </div>
      <div class="custom-products-list">
        <select name="variant_or_custom" class="custom-product-dropdown">
          {%- for custom_product in block.settings.custom_product_list -%}
            {%- if custom_product -%}
              <option
                value="{{ custom_product.selected_or_first_available_variant.id }}"
                data-custom="true"
                data-price="{{ custom_product.first_available_variant.price | money }}"
                data-compare="{{ custom_product.first_available_variant.compare_at_price | money }}"
                {% if forloop.first %}
                  selected
                {% endif %}
                data-available="{{ custom_product.selected_or_first_available_variant.available }}"
                data-variant-id="{{ custom_product.selected_or_first_available_variant.id }}"
              >
                {{ custom_product.title }}
                {% if custom_product.first_available_variant.compare_at_price
                    > custom_product.first_available_variant.price
                %}
                  (Compare at {{ custom_product.first_available_variant.compare_at_price | money }})
                {% endif %}
              </option>
            {%- endif -%}
          {%- endfor -%}
        </select>
      </div>
    </label>
  {%- endif -%}
  <input type="hidden" name="id" id="selectedVariantId" value="{{ product.selected_or_first_available_variant.id }}">
  <button class="btn add-btn-custom">Add to cart</button>
</div>

<script>
  class ProductVariantSelector {
    constructor(container) {
      this.container = container;
      this.radios = container.querySelectorAll('input[name="variant_or_custom"]');
      this.dropdownContainer = container.querySelector('.product-radio-option.option-dropdown');
      this.dropdownRadio = this.dropdownContainer ? this.dropdownContainer.querySelector('input[type="radio"]') : null;
      this.dropdown = this.dropdownContainer ? this.dropdownContainer.querySelector('.custom-product-dropdown') : null;
      this.hiddenInput = container.querySelector('#selectedVariantId');
      this.addToCartBtn = container.querySelector('.btn.add-btn-custom');

      // Price display elements
      this.priceValue = container.querySelector('.selected-variant-price .price-value');
      this.comparePrice = container.querySelector('.selected-variant-price .dp-p-compare-price');

      this.init();
    }

    init() {
      this.setupRadios();
      this.setupDropdown();
      this.updateInitialState();
      this.setupAddToCart();
    }

    // Show/hide dropdown options
    setDropdownVisibility(show) {
      if (!this.dropdownContainer) return;
      const list = this.dropdownContainer.querySelector('.custom-products-list');
      if (list) list.style.display = show ? 'block' : 'none';
    }

    setupRadios() {
      this.radios.forEach((radio) => {
        radio.addEventListener('change', () => {
          const isDropdownRadio = radio === this.dropdownRadio;

          if (isDropdownRadio && this.dropdown) {
            // Dropdown radio clicked â†’ show dropdown
            this.setDropdownVisibility(true);
            this.dropdownRadio.value = this.dropdown.value; // sync value
            this.hiddenInput.value = this.dropdown.value;
            this.updateActive(this.dropdown.value);
            this.updateVariant(this.dropdown.value);
          } else {
            // Normal variant radio
            this.setDropdownVisibility(false);
            this.hiddenInput.value = radio.value;
            this.updateActive(radio.value);
            this.updateVariant(radio.value);
          }
        });
      });
    }

    setupDropdown() {
      if (!this.dropdown) return;

      const updateDropdown = () => {
        const selectedId = this.dropdown.value;
        this.hiddenInput.value = selectedId;

        // Check the dropdown radio
        if (this.dropdownRadio) {
          this.radios.forEach((r) => (r.checked = false));
          this.dropdownRadio.checked = true;
          this.dropdownRadio.value = selectedId; // sync value
        }

        this.setDropdownVisibility(true);
        this.updateActive(selectedId);
        this.updateVariant(selectedId);
      };

      this.dropdown.addEventListener('change', updateDropdown);
    }

    updateActive(selectedId) {
      this.radios.forEach((r) => {
        const label = r.closest('.product-radio-option');
        if (r.value === selectedId) {
          r.checked = true;
          label.classList.add('active');
        } else {
          label.classList.remove('active');
        }
      });
    }

    updateVariant(selectedId) {
      // Media swap
      const media = document.querySelector(`[data-variant-id="${selectedId}"]`);
      if (media) {
        document.querySelectorAll('.product-media-item').forEach((el) => (el.style.display = 'none'));
        media.style.display = 'block';
      }

      // Get selected element: option first, then radio
      const selectedElement =
        this.container.querySelector(`option[value="${selectedId}"]`) ||
        this.container.querySelector(`input[value="${selectedId}"]`);

      if (!selectedElement) return;

      const available = selectedElement.dataset.available === 'true';
      const price = selectedElement.dataset.price || '';
      const compare = selectedElement.dataset.compare || '';

      // Update Add to cart button
      if (!available) {
        this.addToCartBtn.disabled = true;
        this.addToCartBtn.textContent = 'Sold Out';
        this.addToCartBtn.classList.add('btn-disabled');
      } else {
        this.addToCartBtn.disabled = false;
        this.addToCartBtn.textContent = 'Add to cart';
        this.addToCartBtn.classList.remove('btn-disabled');
      }

      // Update price display
      if (this.priceValue && this.comparePrice) {
        this.priceValue.textContent = price;
        if (compare && compare !== '' && compare !== price) {
          this.comparePrice.textContent = compare;
          this.comparePrice.style.display = 'inline';
        } else {
          this.comparePrice.textContent = '';
          this.comparePrice.style.display = 'none';
        }
      }
    }

    updateInitialState() {
      // Determine initial variant
      let initialId = '';
      const checkedRadio = this.container.querySelector('input[name="variant_or_custom"]:checked');

      if (checkedRadio) {
        initialId = checkedRadio.value;
      } else if (this.dropdown) {
        initialId = this.dropdown.value;
        if (this.dropdownRadio) this.dropdownRadio.checked = true;
      }

      this.hiddenInput.value = initialId;
      this.setDropdownVisibility(this.dropdownRadio && this.dropdownRadio.checked);
      this.updateActive(initialId);
      this.updateVariant(initialId);
    }

    setupAddToCart() {
      if (!this.addToCartBtn) return;
      this.addToCartBtn.addEventListener('click', (e) => {
        e.preventDefault();
        const variantId = this.hiddenInput.value;
        if (!variantId) return console.warn('No variant selected!');

        const selectedElement =
          this.container.querySelector(`option[value="${variantId}"]`) ||
          this.container.querySelector(`input[value="${variantId}"]`);

        const available = selectedElement?.dataset?.available === 'true';
        if (!available) return console.warn('Selected variant is sold out!');

        fetch('/cart/add.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ items: [{ id: variantId, quantity: 1 }] }),
        })
          .then((res) => res.json())
          .then((data) => {
            console.log('Added to cart:', data);
            const cartDrawer = document.querySelector('m-cart-drawer');
            if (cartDrawer) {
              cartDrawer.onCartDrawerUpdate(true);
              cartDrawer.open();
            }
          })
          .catch((err) => console.error('Error adding to cart:', err));
      });
    }
  }

  // Init
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.product-radio-options').forEach((container) => {
      new ProductVariantSelector(container);
    });
  });
</script>
